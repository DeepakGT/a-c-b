---
openapi: 3.0.1
info:
  title: API
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
paths:
  "/auth":
    post:
      summary: User registration
      parameters:
      - in: "body"
        name: "body"
        description: "Request parameters"
        required: true
        schema:
          $ref: "#/definitions/UserRegistrationParameters"
      responses:
        "200":
          description: "Valid input"
          content:
            application/json:
              example:
                status: 'success'
                data:
                  email: "testuser2@yopmail.com"
                  uid: "testuser2@yopmail.com"
                  first_name: "testuser2"
                  last_name: "lname"
                  role: "ABA Admin"
        "422":
          description: "Invalid input"
          content:
            application/json:
              example:
                status: 'error'
                data:
                  uid: ""
                  first_name: "testuser2"
                  last_name: "lname"
                  email: "testuser2@yopmail.com"
                  role: "ABA Admin"
                errors:
                  email: ["has already been taken"]
                  full_messages: ["Email has already been taken"]

  "/auth/sign_in":
    post:
      summary: User signin
      parameters:
      - in: "body"
        name: "body"
        description: "Request parameters"
        required: true
        schema:
          $ref: "#/definitions/UserSigninParameters"
      responses:
        "200":
          description: "Valid input"
          content:
            application/json:
              example:
                data:
                  email: "aba_admin_user1@yopmail.com"
                  uid: "aba_admin_user1@yopmail.com"
                  first_name: "Cortez"
                  last_name: "Hermiston"
                  role: "ABA Admin"
        "401":
          description: "Invalid input"
          content:
            application/json:
              example:
                success: false
                errors: ["Invalid login credentials. Please try again."]

  "/auth/sign_out":
    delete:
      summary: User signout
      parameters:
      - in: "header"
        name: "header"
        description: "Request headers"
        required: true
        schema:
          $ref: "#/definitions/UserSignoutHeaders"
      responses:
        "200":
          description: "Valid input"
          content:
            application/json:
              example:
                success: true
        "404":
          description: "Invalid input"
          content:
            application/json:
              example:
                success: false
                errors: ["User was not found or was not logged in."]

  "/auth/password":
    post:
      summary: Password reset
      parameters:
      - in: "body"
        name: "body"
        description: "Request parameters"
        required: true
        schema:
          $ref: "#/definitions/PasswordResetParameters"
      responses:
        "200":
          description: "Valid input"
          content:
            application/json:
              example:
                success: true
                message: "An email has been sent to 'testuser1@yopmail.com' containing instructions for resetting your password."
        "404":
          description: "Invalid input"
          content:
            application/json:
              example:
                success: false
                errors: ["Unable to find user with email 'testuser1@yopmail.com1'."]
    put:
      summary: Password update
      parameters:
      - in: "body"
        name: "body"
        description: "Request parameters"
        required: true
        schema:
          $ref: "#/definitions/PasswordUpdateParameters"
      - in: "header"
        name: "header"
        description: "Request headers"
        required: true
        schema:
          $ref: "#/definitions/PasswordUpdateHeaders"
      responses:
        "200":
          description: "Valid input"
          content:
            application/json:
              example:
                success: true
                data:
                  email: "aba_admin_user1@yopmail.com"
                  uid: "aba_admin_user1@yopmail.com"
                  first_name: "Cortez"
                  last_name: "Hermiston"
                  role: "ABA Admin"
                message: "Your password has been successfully updated."
        "401":
          description: "Invalid input"
          content:
            application/json:
              example:
                success: false
                errors: ["Unauthorized"]
          
definitions:
  UserRegistrationParameters:
    type: "object"
    required:
      - email
      - password
    properties:
      first_name:
        type: "string"
      middle_name:
        type: "string"
      last_name:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      role_name:
        type: string
        enum: ["ABA Admin", "Administrator", "BCBA", "RBT", "Billing"]
  UserSigninParameters:
    type: "object"
    required:
      - email
      - password
    properties:
      email:
        type: "string"
      password:
        type: "string"
  PasswordResetParameters:
    type: "object"
    required:
      - email
      - redirect_url
    properties:
      email:
        type: "string"
      redirect_url:
        type: "string"
        description: 'for redirection, after password change'
  PasswordUpdateParameters:
    type: "object"
    required:
    - password
    - password_confirmation
    properties:
      password:
        type: "string"
      password_confirmation:
        type: "string"
        description: 'should be same as password'
  PasswordUpdateHeaders:
    type: "object"
    required:
    - access-token
    - client
    - uid
    properties:
      access-token:
        type: "string"
      client:
        type: "string"
      uid:
        type: "string"
  UserSignoutHeaders:
    type: "object"
    required:
    - access-token
    - client
    - uid
    properties:
      access-token:
        type: "string"
      client:
        type: "string"
      uid:
        type: "string"
  